if not game:IsLoaded() then 
    repeat game.Loaded:Wait()
    until game:IsLoaded() 
end

local Players = game["Players"]
local Client = Players.localPlayer;
local function fail(r) return Client:Kick(r) end

-- gracefully handle errors when loading external scripts
-- added a cache to make hot reloading a bit faster
local function ClickUI(Button, Manual)
    local connections = getconnections(Button.Activated)
    
    if Manual then
        for i, v in ipairs(connections) do
            v.Function()
        end
    else
        for i, v in ipairs(connections) do
            v:Fire()
        end
    end
end

_G["Team"] = "Pirates"
repeat wait(0.5)
    local CT = Client.PlayerGui.Main:FindFirstChild("ChooseTeam")
	if Client.Team == nil and CT.Visible then
		local chooseTeamFrame = nil
		if _G["Team"] == "Pirates" then
			chooseTeamFrame = CT.Container.Pirates.Frame.ViewportFrame
		elseif _G["Team"] == "Marines" then
			chooseTeamFrame = CT.Container.Marines.Frame.ViewportFrame
		else
			chooseTeamFrame = CT.Container.Pirates.Frame.ViewportFrame
		end
        
        ClickUI(chooseTeamFrame.TextButton, true)
	end
until Client.Team ~= nil and game:IsLoaded()

-- gracefully handle errors when loading external scripts
-- added a cache to make hot reloading a bit faster

shared.__urlcache = shared.__urlcache or {}
local function urlLoad(url)
    local success, result

    if shared.__urlcache[url] then
        success, result = true, shared.__urlcache[url]
    else
        success, result = pcall(game.HttpGet, game, url)
    end

    if (not success) then
        return fail(string.format("Failed to GET url %q for reason: %q", url, tostring(result)))
    end

    local fn, err = loadstring(result)
    if (type(fn) ~= "function") then
        return fail(string.format("Failed to loadstring url %q for reason: %q", url, tostring(err)))
    end

    local results = { pcall(fn) }
    if (not results[1]) then
        return fail(string.format("Failed to initialize url %q for reason: %q", url, tostring(results[2])))
    end

    shared.__urlcache[url] = result
    return unpack(results, 2)
end

local Fluent = urlLoad("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua")
local metadata = urlLoad("https://raw.githubusercontent.com/RedGamer12/Zero.-./main/metadata.lua")

local SaveManager = urlLoad("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua")
local InterfaceManager = urlLoad("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua")

local lvl = urlLoad("https://raw.githubusercontent.com/RedGamer12/Zero.-./main/Module/level_data.lua")
local Rep = "https://raw.githubusercontent.com/RedGamer12/Zero.-./main/Module/"
local PlayerTracker = loadstring(game:HttpGet(Rep.."PlayerTracker.lua"))()

local runService = game:GetService("RunService")
local httpService = game:GetService("HttpService")

do
    if shared._unload then
        pcall(shared._unload)
    end

    function shared._unload()
        if shared._id then
            pcall(runService.UnbindFromRenderStep, runService, shared._id)
        end

        Fluent:Destroy()

        for i = 1, #shared.threads do
            coroutine.close(shared.threads[i])
        end

        for i = 1, #shared.callbacks do
            task.spawn(shared.callbacks[i])
        end
    end

    shared.threads = {}
    shared.callbacks = {}

    shared._id = httpService:GenerateGUID(false)
end

local placeID = game.PlaceId
if placeID == 2753915549 then
    Sea1 = true
elseif placeID == 4442272183 then
    Sea2 = true
elseif placeID == 7449423635 then
    Sea3 = true
end

local Window = Fluent:CreateWindow({
    Title = string.format("Kaitun - Blox Fruit version %s | updated: %s", metadata.version, metadata.updated),
    SubTitle = "by mike_uzime2",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Kaitun = Window:AddTab({ Title = "Kaitun", Icon = "heart-handshake" }),
    Functions = Window:AddTab({ Title = "Functions", Icon = "box" }),
    FightingStyle = Window:AddTab({ Title = "Melee", Icon = "file-box" }),
    Effects = Window:AddTab({ Title = "Effects", Icon = "sun" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

function Notify(seconds, content, subContent, duration)
    local lastNotificationTime = os.time() - seconds - 1  -- Initialize to ensure the first notification is sent

    local currentTime = os.time()
    if currentTime - lastNotificationTime >= seconds then
        Fluent:Notify({
            Title = "Notification",
            Content = content,
            SubContent = subContent, -- Optional
            Duration = duration -- Set to nil to make the notification not disappear
        })
        lastNotificationTime = currentTime
    end
end

local Options = Fluent.Options
-- All Seas
local lf, oc, lgfx
-- Sea1
local pk, sb, ss
-- Sea2
--Sea3
local tu, cdk, bk
do
    Tabs.Kaitun:AddParagraph({
        Title = "Welcome to Crazzy Hub my Lady and Gentleman",
        Content = "Powerful, Undetected, Easy to Use, Very Convenient."
    })

    -- All Seas
    oc = Tabs.Kaitun:AddToggle("oneclick", {Title = "One Click", Default = false })

    Tabs.Kaitun:AddSlider("Delay_HS", {
        Title = "The time for hopping",
        Description = "1 value = 1 minute",
        Default = 120,
        Min = 6,
        Max = 180,
        Rounding = 0
    })

    Tabs.Kaitun:AddToggle("HS", {Title = "Enabled for Hopping", Default = false })
    Tabs.Kaitun:AddParagraph({
        Title = "Adding Points in Progress",
        Content = "You can enable any features under this paragraph!"
    })

    local statboard = {"Melee", "Defense", "Gun", "Blox Fruit"}
    for _, stat in pairs(statboard) do
        Tabs.Kaitun:AddToggle(stat, {Title = stat, Default = false })
    end

    lf = Tabs.Functions:AddToggle("lvlfarm", {Title = "Level Farm", Default = false })
    -- Functions & Sea1
    if Sea1 then
        pk = Tabs.Functions:AddToggle("playerkill", {Title = "Killing Player", Default = false })
        sb = Tabs.Functions:AddToggle("getsaber", {Title = "Get Saber", Default = false })
        ss = Tabs.Functions:AddToggle("secondsea", {Title = "Unlock Seacond Sea", Default = false })
    elseif Sea2 then
    elseif Sea3 then
        Tabs.Functions:AddParagraph({
            Title = "Kill Bosses Feature.",
            Content = "You can enable any features under this paragraph!"
        })
        bk = Tabs.Functions:AddToggle("bk", {Title = "Enabled Boss Kill", Default = false })
        local a={}for b,c in pairs(game.ReplicatedStorage:GetChildren())do if c:FindFirstChild("Humanoid")and string.find(c.Humanoid.DisplayName,"Boss")then table.insert(a,c.Name)end end

        Tabs.Functions:AddDropdown("bchoose", {
            Title = "Found Boss: ",
            Values = a,
            Multi = false,
            Default = 1,
        })
        Tabs.Functions:AddParagraph({
            Title = "Getting Special Sword.",
            Content = "You can enable any features under this paragraph!"
        })
        tu = Tabs.Functions:AddToggle("tu", {Title = "Tushita", Default = false })
        cdk = Tabs.Functions:AddToggle("cdk", {Title = "Cursed Dual Katana", Default = false })
    end

    -- Functions & All Seas
    Tabs.Functions:AddDropdown("weapon", {
        Title = "Weapon for farming",
        Values = {"Melee", "Sword"},
        Multi = false,
        Default = 1,
    })
    Tabs.Functions:AddParagraph({
        Title = "Supporter for farming",
        Content = "You can enable any features under this paragraph!"
    })
    Tabs.Functions:AddToggle("bringmob", {Title = "Bring Mob [Recommended]", Default = false })
    Tabs.Functions:AddSlider("bringdistance", {
        Title = "Distance to Bring",
        Default = 300,
        Min = 0,
        Max = 300,
        Rounding = 0
    })
    Tabs.Functions:AddToggle("bypasstp", {Title = "Improve Teleport [Recommended]", Default = false })
    Tabs.Functions:AddToggle("fastattack", {Title = "Using FA [Recommended]", Default = false })

    -- Fighting Style & All Seas
    Tabs.FightingStyle:AddToggle("spm", {Title = "Superhuman", Default = false })
    Tabs.FightingStyle:AddToggle("gh", {Title = "Godhuman", Default = false })
    
    -- Effects & All Seas
    Tabs.Effects:AddToggle("revanim", {Title = "Remove Animation", Default = false })
    Tabs.Effects:AddToggle("revdeath", {Title = "Remove Death", Default = false })
    Tabs.Effects:AddToggle("revattack", {Title = "Remove Attack", Default = false })
    Tabs.Effects:AddParagraph({
        Title = "Graphics",
        Content = "You can enable any features under this paragraph!"
    })
    lgfx = Tabs.Effects:AddToggle("lowgfx", {Title = "Low Graphics", Default = false })
end

local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game["ReplicatedStorage"]

local VIM = game:GetService("VirtualInputManager")
local VirtualUser = game:GetService("VirtualUser")

-- Data Fighting Style
function SaveSettings(data, fileName)
    local HttpService = game:GetService("HttpService")
    local folderName = "Crazzy Hub/bf-" .. placeID .. "settings"
    
    -- Check if fileName is nil or empty, and provide a default value if needed
    if not fileName or fileName == "" then
        fileName = "defaultFileName"  -- Replace with your desired default file name
    end
    
    local fullPath = folderName .. "/" .. fileName .. "-BloxFruit.json"

    if not isfolder(folderName) then
        makefolder(folderName)
    end

    if not isfile(fullPath) then
        writefile(fullPath, HttpService:JSONEncode(data))
    end
end

function ReadSetting()
    local HttpService = game:GetService("HttpService")
    local folderName = "Crazzy Hub/bf-" .. placeID .. "settings"
    local fileName = Client.Name .. "-BloxFruit.json"
    local fullPath = folderName .. "/" .. fileName

    if not isfile(fullPath) then
        warn("File does not exist:", fullPath)
        return nil
    end

    local fileData = readfile(fullPath)
    local success, decodedData = pcall(function()
        return HttpService:JSONDecode(fileData)
    end)

    if success then
        return decodedData
    else
        warn("Error decoding JSON:", decodedData)
        return nil
    end
end

function UpdateSetting(settingName, newValue)
    local HttpService = game:GetService("HttpService")
    local folderName = "Crazzy Hub/bf-" .. placeID .. "settings"
    local fileName = Client.Name .. "-BloxFruit.json"
    local fullPath = folderName .. "/" .. fileName

    local settings = ReadSetting() or {} -- Load existing settings or create a new table if none exist.

    -- Update the specified setting
    settings[settingName] = newValue

    -- Save the updated settings to the file
    writefile(fullPath, HttpService:JSONEncode(settings))
end

_G.Mastery = {}
SaveSettings(_G.Mastery, Client.Name)

-- Teleport

function TeleportBetweenServers(PlaceID, mode)
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    
    local File = pcall(function()
        AllIDs = httpService:JSONDecode(readfile("Crazzy Hub/bf-"..placeID.."/NotSameServers.json"))
    end)
    
    if not File then
        table.insert(AllIDs, actualHour)
        writefile("Crazzy Hub/bf-"..placeID.."/NotSameServers.json", httpService:JSONEncode(AllIDs))
    end
    
    while true do
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. foundAnything))
        end
        
        local ID = ""
        
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        if Site.data then -- Kiểm tra xem Site.data có tồn tại hay không
            for i,v in pairs(Site.data) do
                local Possible = true
                ID = tostring(v.id)
                
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    for _,Existing in pairs(AllIDs) do
                        if num ~= 0 then
                            if ID == tostring(Existing) then
                                Possible = false
                            end
                        else
                            if tonumber(actualHour) ~= tonumber(Existing) then
                                local delFile = pcall(function()
                                    delfile("Crazzy Hub/bf-"..placeID.."/NotSameServers.json")
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end)
                            end
                        end
                        num = num + 1
                    end
                    
                    if Possible == true then
                        if mode == "Lowest" then
                            if tonumber(v.playing) <= 12 then
                                table.insert(AllIDs, ID)
                                wait()
                                pcall(function()
                                    writefile("Crazzy Hub/bf-"..placeID.."/NotSameServers.json", httpService:JSONEncode(AllIDs))
                                    wait()
                                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Client)
                                    return -- Thoát khỏi vòng lặp sau khi tham gia vào máy chủ phù hợp
                                end)
                                wait(4)
                            end
                        elseif type(mode) == "number" then
                            if tonumber(v.playing) <= tonumber(mode) then
                                table.insert(AllIDs, ID)
                                wait()
                                pcall(function()
                                    writefile("Crazzy Hub/bf-"..placeID.."/NotSameServers.json", httpService:JSONEncode(AllIDs))
                                    wait()
                                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Client)
                                    return -- Thoát khỏi vòng lặp sau khi tham gia vào máy chủ phù hợp
                                end)
                                wait(4)
                            end
                        end
                    end
                end
            end
        end
    end
end

local Comm = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")
function Com(com,...)
	local Remote = ReplicatedStorage.Remotes:FindFirstChild("Comm"..com)
	if Remote:IsA("RemoteEvent") then
		Remote:FireServer(...)
	elseif Remote:IsA("RemoteFunction") then
		Remote:InvokeServer(...)
	end
end

function GetDistance(position1, position2)
    return (position1 - position2).Magnitude
end

function CheckHeight(part)
    local hrp = Client.Character and Client.Character:FindFirstChild("HumanoidRootPart")

    if part and hrp then
        local distanceThreshold = 50

        local distance = hrp.Position.Y - part.Position.Y
        if distance <= distanceThreshold then
            hrp.CFrame = hrp.CFrame * CFrame.new(0,100,0)
        end
    end
end

function DisableCollisions(object, enable)
    local parts = object.Character:GetDescendants()

    -- Tạo danh sách batch chứa các BasePart cần được thay đổi
    local batch = {}
    local batchSize = 0

    for _, v in ipairs(parts) do
        if v:IsA("BasePart") then
            table.insert(batch, v)
            batchSize = batchSize + 1

            -- Bắt đầu batch khi kích thước đạt ngưỡng
            if batchSize >= 100 then
                for _, part in ipairs(batch) do
                    part.CanCollide = enable
                end
                batch = {}
                batchSize = 0
            end
        end
    end

    -- Xử lý các thành phần trong batch cuối cùng (nếu còn)
    for _, part in ipairs(batch) do
        part.CanCollide = enable
    end
end

function sortTorchesByName(a, b)
    return a.Name < b.Name
end

-- Weapon
function FindTool(toolName)
    local player = Client
    local character = player.Character
    local backpack = player.Backpack

    local containers = {character, backpack}

    for _, container in pairs(containers) do
        local tool = container:FindFirstChild(toolName)
        if tool then
            return tool
        end
    end

    return nil
end

function FindItemInInventory(itemToFind)
    for _, v in pairs(Client.PlayerGui.Main.InventoryContainer.Right.Content.ScrollingFrame.Frame:GetChildren()) do
        for _, v1 in pairs(v:GetChildren()) do
            if v1:IsA("TextButton") or v1.Name == "ItemName" then
                if v1.Text == itemToFind then
                    return true
                end
            end
        end
    end

    return false
end

local debounce = false
function EquipWeapon(toolName, toolCustom)
    if debounce then
        return
    end
    debounce = true
    local backpack = Client.Backpack
    for _, tool in ipairs(backpack:GetChildren()) do
        local isTool = tool:IsA("Tool")
        if toolName == nil then
            if isTool and tool.Name == toolCustom and backpack:FindFirstChild(toolCustom) then
                Client.Character:WaitForChild("Humanoid"):EquipTool(tool)
                wait(0.15)
            end
        else
            if isTool and toolCustom == nil and tool.ToolTip == toolName then
                Client.Character:WaitForChild("Humanoid"):EquipTool(tool)
                wait(0.15)
            end
        end
    end
    wait(0.05)
    debounce = false
end

-- Transport
local tween = nil
function GetIsLand(...)
	local RealtargetPos = {...}
	local targetPos = RealtargetPos[1]
	local RealTarget
	if type(targetPos) == "vector" then
		RealTarget = targetPos
	elseif type(targetPos) == "userdata" then
		RealTarget = targetPos.Position
	elseif type(targetPos) == "number" then
		RealTarget = CFrame.new(unpack(RealtargetPos))
		RealTarget = RealTarget.p
	end

	local ReturnValue
	local CheckInOut = math.huge;
	if Client.Team then
		for _,v in pairs(workspace._WorldOrigin.PlayerSpawns:FindFirstChild(tostring(Client.Team)):GetChildren()) do 
			local ReMagnitude = GetDistance(RealTarget, v:GetModelCFrame().p);
			if ReMagnitude < CheckInOut then
				CheckInOut = ReMagnitude;
				ReturnValue = v.Name
			end
		end
		if ReturnValue then
			return ReturnValue
		end 
	end
end

function selectSpawnPoint(object)
    local closestSpawn = nil
    local closestDistance = math.huge
    
    for _, model in pairs(workspace["_WorldOrigin"].PlayerSpawns[tostring(Client.Team)]:GetChildren()) do
        if model:IsA("Model") then
            for _, spawn in pairs(model:GetChildren()) do
                if spawn:IsA("Part") then
                    if object and spawn then
                        local distance = GetDistance(spawn.Position, object.Position)
                    
                        if distance < closestDistance then
                            closestSpawn = spawn
                            closestDistance = distance
                        end
                    end
                end
            end
        end
    end
    
    return closestSpawn
end

function FindNearestTeleporter(playerPosition)
    local worldId = game.PlaceId
    local locations

    if worldId == 2753915549 then
        locations = {
            ["SkyLandsI"] = Vector3.new(-4607.82275390625, 872.5422973632812, -1667.556884765625),
            ["SkyLandsII"] = Vector3.new(-7894.6201171875, 5545.49169921875, -380.2467346191406),
            ["UnderWater"] = Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            ["Whirlpool"] = Vector3.new(3876.280517578125, 35.10614013671875, -1939.3201904296875)
        }
    elseif worldId == 4442272183 then
        locations = {
            ["SwanEntrance"] = Vector3.new(-286.989075, 306.137909, 592.882751)
        }
    end

    local nearestLocation
    local minDistance = math.huge
    local playerRootPosition = Client.Character.HumanoidRootPart.Position

    for locationName, locationPosition in pairs(locations) do
        local distance = GetDistance(locationPosition, playerPosition.Position)
        if distance < minDistance then
            minDistance = distance
            nearestLocation = locationName
        end
    end

    local playerToNearest = GetDistance(playerRootPosition, playerPosition.Position)

    if minDistance <= playerToNearest then
        return locations[nearestLocation]
    end
end

function requestEntrance(aJ)
    CancelTween()
    local args = {"requestEntrance", aJ}
    Com("F_", unpack(args))
    local Old = Client.Character.HumanoidRootPart.CFrame
    Client.Character.HumanoidRootPart.CFrame = CFrame.new(Old.X, Old.Y, Old.Z)
    task.wait(0.5)
    return
end

function bypassTeleport(tween, object, distance, distanceValue)
    if Options.bypasstp and Options.bypasstp.Value then
        if distance <= distanceValue then
            if tween then
                tween:Play()
            end
        else
            print(tostring(GetIsLand(object)))
            CancelTween()
            fkwarp = false
            pcall(function()
                if tostring(GetIsLand(object)) == "DressTown" or tostring(GetIsLand(object)) == "Sky2" or tostring(GetIsLand(object)) == "Undertown" then
                    local pos = FindNearestTeleporter(object)
                    --if pos and distance > 1500 then
                        requestEntrance(pos)
                    --end
                elseif Client.Data:FindFirstChild("LastSpawnPoint").Value == tostring(GetIsLand(object)) then
                    Client.Character:WaitForChild("Humanoid").Health = 0
                    task.wait(0.1)
                    repeat wait() until Client.Character:WaitForChild("Humanoid").Health > 0
                else
                    if PlayerTracker.IsPlayerDead(Client) then 
                        CancelTween()
                        repeat wait() until Client.Character:WaitForChild("Humanoid").Health > 0 
                        task.wait(0.75)
                    end
    
                    if Client.Character:WaitForChild("Humanoid").Health > 0 then
                        local elapsedTime = 0
    
                        local heartbeatConnection
                        local function onUpdate(deltaTime)
                            elapsedTime = elapsedTime + deltaTime
                            Client.Character.HumanoidRootPart.CFrame = selectSpawnPoint(object).CFrame
                            Com("F_", "SetSpawnPoint")
                            if elapsedTime >= 0.075 or fkwarp == true then
                                heartbeatConnection:Disconnect()
                            end
                        end
                        
                        heartbeatConnection = RunService.Heartbeat:Connect(onUpdate)
    
                        fkwarp = true
                    end
                    task.wait(0.04)
                    Client.Character:FindFirstChild("Humanoid").Health = 0
                    repeat wait() until Client.Character:WaitForChild("Humanoid").Health > 0
                    task.wait(0.1)
                    Com("F_", "SetSpawnPoint")
                end
            end)
        end
        task.wait(0.2)
        return
    end
end

function CancelTween()
    if tween then
        tween:Cancel()
        tween = nil
    end
end

local function TweenService1(RealTarget)
    if PlayerTracker.IsPlayerDead(Client) then
        CancelTween()
        repeat task.wait() until Client.Character:WaitForChild("Humanoid").Health > 0
        wait(0.75)
    end

    local val = Instance.new("CFrameValue")
    val.Value = Client.Character.HumanoidRootPart.CFrame

    local tween = game:GetService("TweenService"):Create(
        val, 
        TweenInfo.new((Client.Character.HumanoidRootPart.Position - RealTarget.p).magnitude / 300, Enum.EasingStyle.Linear), 
        {Value = RealTarget}
    )

    tween:Play()

    local completed
    tween.Completed:Connect(function()
        completed = true
    end)

    while not completed do
        if not (Options.lvlfarm and Options.lvlfarm.Value) and not (Options.playerkill and Options.playerkill.Value) and not (Options.oneclick and Options.oneclick.Value) and not (Options.getsaber and Options.getsaber.Value) and not (Options.secondsea and Options.secondsea.Value) and not (Options.cdk and Options.cdk.Value) and not (Options.tu and Options.tu.Value) and not (Options.at and Options.at.Value) then tween:Cancel() break end
        Client.Character.HumanoidRootPart.CFrame = val.Value
        task.wait()
    end

    val:Destroy()
end

function TweenService2(RealTarget, customDistance, Specical)
    if not (Options.lvlfarm and Options.lvlfarm.Value) and not (Options.playerkill and Options.playerkill.Value) and not (Options.oneclick and Options.oneclick.Value) and not (Options.getsaber and Options.getsaber.Value) and not (Options.secondsea and Options.secondsea.Value) and not (Options.cdk and Options.cdk.Value) and not (Options.tu and Options.tu.Value) and not (Options.bk and Options.bk.Value) and not (Options.at and Options.at.Value) then
        print("Disable")
        CancelTween()
        return
    else
        if PlayerTracker.IsPlayerDead(Client) then
            CancelTween()
            repeat task.wait() until Client.Character:WaitForChild("Humanoid").Health > 0
            wait(0.75)
        end

        local Distance = GetDistance(RealTarget.Position, Client.Character.HumanoidRootPart.Position)

        if customDistance then
            if Distance <= customDistance then
                pcall(function()
                    CancelTween()
                    Client.Character.HumanoidRootPart.CFrame = RealTarget
                    return
                end)
            end
        else
            if Distance <= 250 then
                pcall(function()
                    CancelTween()
                    Client.Character.HumanoidRootPart.CFrame = RealTarget
                    return
                end)
            end
        end

        if not Specical then
            local distancetotp = 1000
            if Sea2 or Sea3 then
                distancetotp = 2500
            end
            bypassTeleport(tween, RealTarget, Distance, distancetotp)
        end

        local cameraPart = workspace.Camera.Part
        if Distance > 1000 then
            CheckHeight(cameraPart)
        end

        local info = TweenInfo.new(Distance / 315, Enum.EasingStyle.Linear)
        tween = game:GetService("TweenService"):Create(Client.Character.HumanoidRootPart, info, {CFrame = RealTarget})

        tween:Play()
    end
end

-- All Seas

oc:OnChanged(function()
    if not Options["oneclick"].Value then
        CancelTween()
    end
end)

lf:OnChanged(function()
    if not Options["lvlfarm"].Value then
        CancelTween()
    end
end)

-- Sea1

if Sea1 then
    pk:OnChanged(function()
        if not Options["playerkill"].Value then
            CancelTween()
        end
    end)
    
    sb:OnChanged(function()
        if not Options["getsaber"].Value then
            CancelTween()
        end
    end)
    
    ss:OnChanged(function()
        if not Options["secondsea"].Value then
            CancelTween()
        end
    end)
elseif Sea2 then
elseif Sea3 then
    bk:OnChanged(function()
        if not Options["bk"].Value then
            CancelTween()
        end
    end)
    tu:OnChanged(function()
        if not Options["tu"].Value then
            CancelTween()
        end
    end)
    cdk:OnChanged(function()
        if not Options["cdk"].Value then
            CancelTween()
        end
    end)
end

--[[lgfx:OnChanged(function()
    if not Options["lowgfx"].Value then
        local Terrain = workspace:FindFirstChildOfClass('Terrain')
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 0
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 9e9
        settings().Rendering.QualityLevel = 1
        for i,v in pairs(game:GetDescendants()) do
            if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
            elseif v:IsA("Decal") then
                v.Transparency = 1
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = NumberRange.new(0)
            elseif v:IsA("Explosion") then
                v.BlastPressure = 1
                v.BlastRadius = 1
            end
        end
        for i,v in pairs(Lighting:GetDescendants()) do
            if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
                v.Enabled = false
            end
        end
        workspace.DescendantAdded:Connect(function(child)
            task.spawn(function()
                if child:IsA('ForceField') then
                    RunService.Stepped:Wait()
                    child:Destroy()
                elseif child:IsA('Sparkles') then
                    RunService.Stepped:Wait()
                    child:Destroy()
                elseif child:IsA('Smoke') or child:IsA('Fire') then
                    RunService.Stepped:Wait()
                    child:Destroy()
                end
            end)
        end)
    end
end)]]

-- Fast Attack
local CombatFramework = require(Client.PlayerScripts:WaitForChild("CombatFramework"))
local CombatFrameworkR = debug.getupvalues(CombatFramework)[2]
local RigLibModule = require(ReplicatedStorage.CombatFramework.RigLib)

function Click()
    VirtualUser:CaptureController()
    VirtualUser:Button1Down(Vector2.new(851, 158))
end

function ResetCharacter()
    Click()
    Client.Character.Stun.Value = 0
    Client.Character.Humanoid.Sit = false
    Client.Character.Busy.Value = false
end

function ResetCombatFramework()
    local ac = CombatFrameworkR.activeController
    --ac:attack()
    ac.timeToNextAttack = 0
    ac.increment = 3
    ac.hitboxMagnitude = 100
    ac.blocking = false
    ac.timeToNextBlock = 0
    ac.focusStart = 0
    ac.humanoid.AutoRotate = true
end

function GetCurrentWeapon()
    local p13 = CombatFrameworkR.activeController
    local weapon = p13.blades[1]
    if not weapon then
        return weapon
    end
    pcall(function()
        while weapon.Parent ~= Client.Character do
            weapon = weapon.Parent
        end
    end)
    return weapon
end

function GetAllBladeHits(Mode, Sizes)
    local Hits = {}
    local Characters
    
    if Mode == "Player" then
        Characters = workspace.Characters:GetChildren()
    elseif Mode == "NPC" then
        Characters = workspace.Enemies:GetChildren()
    end
    
    for i = 1, #Characters do
        local v = Characters[i]
        local Human = v:FindFirstChildOfClass("Humanoid")
        
        if Human and Human.RootPart and Human.Health > 0 and Client:DistanceFromCharacter(Human.RootPart.Position) < Sizes + 5 then
            table.insert(Hits, Human.RootPart)
        end
    end
    
    return Hits
end

function AttackFunction(Mode, Sizes)
    local ac = CombatFrameworkR.activeController

    if ac and ac.equipped then
        for indexincrement = 1, 1 do
            local bladehit
            
            if Mode == "Player" then
                bladehit = GetAllBladeHits("Player", Sizes)
            elseif Mode == "NPC" then
                bladehit = GetAllBladeHits("NPC", Sizes)
            elseif Mode == "NIL" then
                bladehit = RigLibModule.getBladeHits(Client.Character, {Client.Character.HumanoidRootPart}, Sizes)
            end

            local cac = {}
            local hash = {}
            for k, v in pairs(bladehit) do
                if v.Parent:FindFirstChild("HumanoidRootPart") and not hash[v.Parent] then
                    table.insert(cac, v.Parent.HumanoidRootPart)
                    hash[v.Parent] = true
                end
            end
            bladehit = cac
            if #bladehit > 0 then
                CombatFrameworkR.activeController.timeToNextAttack = 1
                CombatFrameworkR.activeController.attacking = false
                CombatFrameworkR.activeController.blocking = false
                CombatFrameworkR.activeController.timeToNextBlock = 0
                CombatFrameworkR.activeController.increment = 3
                CombatFrameworkR.activeController.hitboxMagnitude = 100
                CombatFrameworkR.activeController.focusStart = 0
                ReplicatedStorage.RigControllerEvent:FireServer("weaponChange", tostring(GetCurrentWeapon()))
                ReplicatedStorage.RigControllerEvent:FireServer("hit", bladehit, indexincrement, "")
            end
        end
    end
end

-- Bring Mob

function InMyNetWork(object)
    if isnetworkowner then
        return isnetworkowner(object)
    else
        if GetDistance(object.Position, Client.Character.HumanoidRootPart.Position) <= 300 then
            return true
        end
        return false
    end
end

function SizePart(part)
    local humanoidRootPart = part:FindFirstChild("HumanoidRootPart")
    
    if not humanoidRootPart then
        return
    end
    
    if not (humanoidRootPart:FindFirstChild("GoodBoy")) then
        local vc = Instance.new("BodyVelocity", humanoidRootPart)
        vc.Parent = humanoidRootPart
        vc.Name = "GoodBoy"
        vc.MaxForce = Vector3.new(1, 1, 1) * math.huge
        vc.Velocity = Vector3.new(0, 0, 0)
    end
end

function BringMobsToPosition(targetPosition, mon)

    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
        local Distance = GetDistance(enemy.HumanoidRootPart.Position, Client.Character.HumanoidRootPart.Position)

        if enemy.Name == mon and Distance <= (Options.bringdistance and Options.bringdistance.Value) and Distance > 3 then
            if InMyNetWork(enemy.HumanoidRootPart) then
                if Options.bringmob.Value then
                    enemy.HumanoidRootPart.CFrame = targetPosition
                    enemy.Humanoid.JumpPower = 0
                    enemy.Humanoid.WalkSpeed = 0
    
                    enemy.HumanoidRootPart.Size = Vector3.new(5, 5, 5)
                    enemy.HumanoidRootPart.CanCollide = false
                    enemy.Head.CanCollide = false
                    enemy.Humanoid:ChangeState(11)
                    enemy.Humanoid:ChangeState(14)
                    enemy.Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                    if enemy.Humanoid:FindFirstChild("Animator") then
                        enemy.Humanoid.Animator:Destroy()
                    end
                    SizePart(enemy)
                else
                    enemy.HumanoidRootPart.Size = Vector3.new(5, 5, 5)
                    enemy.HumanoidRootPart.Anchored = true
                end
            end
        end
    end
end

-- Remove Effects
function setupAttackAnimationOverride(ParticleModule)
    if not shared.attackAnimationOverride then
        shared.attackAnimationOverride = RigLibModule.wrapAttackAnimationAsync
    end

    if not shared.originalPlayFunction then
        shared.originalPlayFunction = ParticleModule.play
    end

    RigLibModule.wrapAttackAnimationAsync = function(animation, character, position, direction, callback)
        local hits = RigLibModule.getBladeHits(character, position, direction)
        if hits then
            if Options.lvlfarm and Options.lvlfarm.Value then
                if Options.revanim and Options.revanim.Value then
                    ParticleModule.play = function() end
                    animation:Play(0.01, 0.01, 0.01)
                    callback(hits)
                    ParticleModule.play = shared.originalPlayFunction
                    wait(animation.Length * 0.5)
                    animation:Stop()
                else
                    callback(hits)
                    ParticleModule.play = shared.originalPlayFunction
                    wait(animation.Length * 0.5)
                    animation:Stop()
                end
            end
        end
    end
end

local SpawnCFrame, ChoosenCFrame, PlayerCFrame = CFrame.new(0,50,0), CFrame.new(0,30,0), CFrame.new(0,5.4,5.5)
local message = {"I don't have anything for you right now. Come back later.", "Sorry, you must join a public server for PvP tasks."}
local InKaitunProgress = false
local PosMon, MobFarm = nil, nil
local blnamequest = {}
local TweenDone = false

local LocalPlayerLevelValue
local LocalPlayerBeliValue
local LocalPlayerFragmentValue

-- Weapons Function
local spmRequirement = 300 -- Minimize 300 or above (>) 300
local advancedMelee = {
    ["Superhuman"] = 400,
    ["Death Step"] = 400,
    ["Sharkman Karate"] = 400,
    ["Electric Claw"] = 400,
    ["Dragon Talon"] = 400,
    ["Godhuman"] = 400
    -- Add other melees and their requirements as needed
}

local Price_FightingStyle = {
    ["Black Leg"] = {Beli = 150000, Fragment = 0},
    ["Fishman Karate"] = {Beli = 750000, Fragment = 0},
    ["Electro"] = {Beli = 500000, Fragment = 0},
    ["Dragon Claw"] = {Beli = 0, Fragment = 1500},
    ["Superhuman"] = {Beli = 3000000, Fragment = 0},
    ["Sharkman Karate"] = {Beli = 2500000, Fragment = 5000},
    ["Death Step"] = {Beli = 2500000, Fragment = 5000},
    ["Dragon Talon"] = {Beli = 3000000, Fragment = 5000},
    ["Godhuman"] = {Beli = 5000000, Fragment = 5000},
    ["Electric Claw"] = {Beli = 3000000, Fragment = 5000}
}

local abilities = {
    ["Black Leg"] = "BuyBlackLeg",
    ["Fishman Karate"] = "BuyFishmanKarate",
    ["Electro"] = "BuyElectro",
    ["Dragon Claw"] = function()
        local dragonClawTrue = Comm:InvokeServer("BlackbeardReward", "DragonClaw", "1") == 1
        Com("F_", "BlackbeardReward", "DragonClaw", "2")
        return dragonClawTrue
    end,
    ["Superhuman"] = "BuySuperhuman",
    ["Sharkman Karate"] = "BuySharkmanKarate",
    ["Death Step"] = "BuyDeathStep",
    ["Dragon Talon"] = "BuyDragonTalon",
    ["Godhuman"] = "BuyGodhuman",
    ["Electric Claw"] = "BuyElectricClaw"
}

function GetAndCheckMeleeMastery(meleeName)
    
    local masteryData = abilities[meleeName]
    local hasMelee = false

    if type(masteryData) == "string" then
        masteryData = Comm:InvokeServer(masteryData, true) == 1
    elseif type(masteryData) == "function" then
        masteryData = masteryData()
    end

    if masteryData then
        hasMelee = true
        local inInventory = Client.Character:FindFirstChild(meleeName) or Client.Backpack:FindFirstChild(meleeName)

        if not inInventory then
            masteryData = abilities[meleeName]

            if type(masteryData) == "string" then
                Comm:InvokeServer(masteryData, true)
                masteryData = Comm:InvokeServer(masteryData)
            elseif type(masteryData) == "function" then
                masteryData = masteryData()
            end
        end

        if inInventory then
            local melee =  FindTool(meleeName)
            if melee then
                return {
                    Value = melee.Level.Value,
                    HasMelee = hasMelee,
                }
            end
        end
    end

    return {
        Value = 0,
        HasMelee = hasMelee,
    }
end

function BuyMelee(meleeName, buyIfPossible)
    local masteryData = abilities[meleeName]

    if type(masteryData) == "string" then
        Com("F_", masteryData, true)
        Com("F_", masteryData)
    elseif type(masteryData) == "function" then
        masteryData = masteryData()
    end

    if buyIfPossible then
        local priceInfo = Price_FightingStyle[meleeName]

        if priceInfo and priceInfo.Beli and priceInfo.Beli <= LocalPlayerBeliValue
            and priceInfo.Fragment and priceInfo.Fragment <= LocalPlayerFragmentValue
        then
            masteryData = abilities[meleeName]

            if type(masteryData) == "string" then
                Com("F_", masteryData, true)
                Com("F_", masteryData)
            elseif type(masteryData) == "function" then
                masteryData()
            end
        end
    end
end

function CheckPhouyeDoor()
    local Hall = workspace.Map.IceCastle.Hall
    if Hall.LibraryDoor:FindFirstChild("PhoeyuDoor") then
        return Hall.LibraryDoor.PhoeyuDoor.CanCollide
    end
end

function SaveMasteryMelee(option, param1, param2)
    local data_melee = _G.Mastery["Melee_Mastery"] or abilities

    if option == 1 then
        -- Option 1: SaveMasteryMelee(1, advancedMelee)
        local defaultRequirements = {
            ["Black Leg"] = spmRequirement,
            ["Electro"] = spmRequirement,
            ["Fishman Karate"] = spmRequirement,
            ["Dragon Claw"] = spmRequirement,
        }
        
        for meleeName, masteryValue in pairs(data_melee) do
            GetAndCheckMeleeMastery(meleeName)
            local result = GetAndCheckMeleeMastery(meleeName)
            local requirement = defaultRequirements[meleeName] or advancedMelee[meleeName] or spmRequirement

            UpdateSetting(meleeName, {
                Value = result.Value,
                Finished = result.Value >= requirement,
                HasMelee = result.HasMelee,
            })
        end
    elseif option == 2 then
        -- Option 2: SaveMasteryMelee(2, spmRequirement, "Electro"--Melee basic muốn chọn)
        local meleeName = param2
        GetAndCheckMeleeMastery(meleeName)
        local result = GetAndCheckMeleeMastery(meleeName)
        local requirement = param1

        UpdateSetting(meleeName, {
            Value = result.Value,
            Finished = result.Value >= requirement,
            HasMelee = result.HasMelee,
        })
    elseif option == 3 then
        -- Option 3: SaveMasteryMelee(3, advancedMelee, "Electric Claw"--Melee advanced muốn chọn)
        local meleeName = param2
        GetAndCheckMeleeMastery(meleeName)
        local result = GetAndCheckMeleeMastery(meleeName)
        local requirement = param1[meleeName]

        UpdateSetting(meleeName, {
            Value = result.Value,
            Finished = result.Value >= requirement,
            HasMelee = result.HasMelee,
        })
    end

    return _G.Mastery["Melee_Mastery"]
end

function IsMasteryStructureValid(data)
    -- Cấu trúc đặc trưng bạn mong muốn
    local expectedStructure = {
        ["Dragon Talon"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Black Leg"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Godhuman"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Electro"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Sharkman Karate"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Death Step"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Fishman Karate"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Superhuman"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Electric Claw"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
        ["Dragon Claw"] = { Value = "number", Finished = "boolean", HasMelee = "boolean" },
    }

    for meleeName, structure in pairs(expectedStructure) do
        local meleeData = data[meleeName]

        if not meleeData or type(meleeData.Value) ~= structure.Value or type(meleeData.Finished) ~= structure.Finished or type(meleeData.HasMelee) ~= structure.HasMelee then
            return false
        end
    end

    return true
end

if IsMasteryStructureValid(ReadSetting()) then
    warn("Happi happi happi uWu.")
else
    warn("Not found file name: "..Client.Name .. "-BloxFruit.json")
    SaveMasteryMelee(1, spmRequirement)
end

function AutoSuperhuman(spmRequirement)
    local blackLegFinished, blackLeghas = ReadSetting()["Black Leg"].Finished, ReadSetting()["Black Leg"].HasMelee
    local electroFinished, electrohas = ReadSetting()["Electro"].Finished, ReadSetting()["Electro"].HasMelee
    local fishmanKarateFinished, fishmanKarateClawhas = ReadSetting()["Fishman Karate"].Finished, ReadSetting()["Fishman Karate"].HasMelee
    local dragonClawFinished, dragonClawhas = ReadSetting()["Dragon Claw"].Finished, ReadSetting()["Dragon Claw"].HasMelee
    
    if not blackLegFinished then
        if blackLeghas then
            SaveMasteryMelee(2, spmRequirement, "Black Leg")
        else
            BuyMelee("Black Leg")
        end
    else
        if not electroFinished then
            if electrohas then
                SaveMasteryMelee(2, spmRequirement, "Electro")
            else
                BuyMelee("Electro")
            end
        else
            if not fishmanKarateFinished then
                if fishmanKarateClawhas then
                    SaveMasteryMelee(2, spmRequirement, "Fishman Karate")
                else
                    BuyMelee("Fishman Karate")
                end
            else
                if not dragonClawFinished then
                    if dragonClawhas then
                        SaveMasteryMelee(2, spmRequirement, "Dragon Claw")
                    else
                        if LocalPlayerFragmentValue < Price_FightingStyle["Dragon Claw"].Fragment then
                            if Sea2 or Sea3 then
                                if Comm:InvokeServer("BlackbeardReward", "DragonClaw", "2") == 0 then
                                    _G.Kaitun["RaidSettings"]["Auto Raid"] = true
                                else
                                    _G.Kaitun["RaidSettings"]["Auto Raid"] = false
                                end
                            end
                        else
                            BuyMelee("Dragon Claw")
                        end
                    end
                end
            end
        end
    end
    
    local allFinished = false

    if blackLegFinished and electroFinished and fishmanKarateFinished and dragonClawFinished then
        allFinished = true
    end 

    -- If all specified melees are finished, create the autoSPM variable
    if allFinished then
        if LocalPlayerBeliValue >= 3000000 then
            BuyMelee("Superhuman", true)
        end
        
    end
end

local inProccess = false
function AutoDeathStep(deathStepRequirement)
    local blackLegFinished = ReadSetting()["Black Leg"].Finished
    local deathStepFinished, deathStephas = ReadSetting()["Death Step"].Finished, ReadSetting()["Death Step"].HasMelee
    if blackLegFinished then
        if deathStephas then
            if not deathStepFinished then
                SaveMasteryMelee(3, deathStepRequirement, "Death Step")
            end
        else
            if CheckPhouyeDoor() then
                if Sea2 then
                    inProccess = true
                    FightBoss(Options.gh and Options.gh.Value, "Awakened Ice Admiral [Boss]", false, true)
                else
                    TeleportSea(2)
                end
            else
                if LocalPlayerFragmentValue >= Price_FightingStyle["Death Step"].Fragment then
                    BuyMelee("Death Step")
                else
                    if Sea2 or Sea3 then
                        if Comm:InvokeServer("BuyDeathStep") == 0 then
                            inProccess = true
                            _G.Kaitun["RaidSettings"]["Auto Raid"] = true
                        else
                            _G.Kaitun["RaidSettings"]["Auto Raid"] = false
                            inProccess = false
                        end
                    end
                end
            end
        end
    end
end

-- GetQuest
local GuideModule = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
local Quests = require(game.ReplicatedStorage.Quests)

local Mob1 = ""
local GuideModule = require(game.ReplicatedStorage:WaitForChild("GuideModule"))

local Q = require(game.ReplicatedStorage.Quests)
local R = {"BartiloQuest", "Trainees", "MarineQuest", "CitizenQuest"}

function CheckQuestData()
    for r, _ in next, GuideModule.Data do
        if r == "QuestData" then
            return true
        end
    end
    return false
end

function CheckNameDoubleQuest()
    local a
    if CheckQuestData() then
        for r, _ in next, GuideModule.Data.QuestData.Task do
            a = r
        end
    end
    return a
end

function DetermineMobAndQuest()
    local playerLevel = Client.Data.Level.Value
    local minLevel = 0
    
    for questName, questData in pairs(Q) do
        for taskIndex, taskData in pairs(questData) do
            local requiredLevel = taskData.LevelReq
            for subTaskIndex, subTaskValue in pairs(taskData.Task) do
                if playerLevel >= requiredLevel and requiredLevel >= minLevel and taskData.Task[subTaskIndex] > 1 and not table.find(R, tostring(questName)) then
                    minLevel = requiredLevel
                    Mob1 = tostring(subTaskIndex)
                    Mob2 = questName
                    Mob3 = taskIndex
                end
            end
        end
    end
end

local h = false
function CheckDoubleQuest2()
    DetermineMobAndQuest()
    local result = {}
    
    if Client.Data.Level.Value >= 10 and h and CheckQuestData() and CheckNameDoubleQuest() == Mob1 and #CheckNameDoubleQuest() > 2 then
        for _, quest in pairs(Q) do
            for _, task in pairs(quest) do
                for taskName, _ in pairs(task.Task) do
                    if tostring(taskName) == Mob1 then
                        for _, subQuest in pairs(quest) do
                            for subTaskName, subTaskCount in pairs(subQuest.Task) do
                                if subTaskName ~= Mob1 and subTaskCount > 1 then
                                    if subQuest.LevelReq <= Client.Data.Level.Value then
                                        result.Name = tostring(subTaskName)
                                        result.NameQuest = quest
                                        result.ID = _
                                    else
                                        result.Name = Mob1
                                        result.NameQuest = Mob2
                                        result.ID = Mob3
                                    end
                                    return result
                                end
                            end
                        end
                    end
                end
            end
        end
    else
        result.Name = Mob1
        result.NameQuest = Mob2
        result.ID = Mob3
    end
    
    return result
end

function GetQuestPoses()
    local questPoses = {}

    for _, instance in pairs(getnilinstances()) do
        if instance:IsA("Model") and instance:FindFirstChild("Head") then
            local questBBG = instance.Head:FindFirstChild("QuestBBG")
            if questBBG and questBBG.Title.Text == "QUEST" then
                questPoses[instance.Name] = instance.Head.CFrame * CFrame.new(0, -2, 2)
            end
        end
    end

    for _, npc in pairs(workspace.NPCs:GetDescendants()) do
        if npc.Name == "QuestBBG" and npc.Title.Text == "QUEST" then
            questPoses[npc.Parent.Parent.Name] = npc.Parent.Parent.Head.CFrame * CFrame.new(0, -2, 2)
        end
    end

    return questPoses
end

function GetQuestPoint()
    local updatedQuestPoint = {}
    local questPosesCopy = {}

    -- Lặp qua các giá trị từ GetQuestPoses() và thêm vào questPosesCopy
    for i, v in pairs(GetQuestPoses()) do
        questPosesCopy[i] = v
    end

    local V = getscriptclosure(game:GetService("Players").LocalPlayer.PlayerScripts.NPC)
    local W = {}

    -- Lặp qua các protos và constants và thu thập thông tin cần thiết
    for k, v in pairs(debug.getprotos(V)) do
        if #debug.getconstants(v) == 1 then
            table.insert(W, debug.getconstant(v, 1))
        end
    end

    local X = false
    local Y = {}

    -- Lặp qua các constants để xác định thông tin cần thiết
    for k, v in pairs(debug.getconstants(V)) do
        if type(v) == "string" then
            if v == "Players" then
                X = false
            end
            if not X then
                if v == "Blox Fruit Dealer" then
                    X = true
                end
            end
            if X then
                table.insert(Y, v)
            end
        end
    end

    local Z = {}

    -- Lặp qua các giá trị từ Y và Z để tạo updatedQuestPoint
    -- print("questPosesCopy: ")
    --[[for i, v in pairs(questPosesCopy) do
        print(i, v)
    end]]

    -- print("Y: ")
    for k, v in pairs(Y) do
        if questPosesCopy[v] then
            Z[W[k]] = Y[k]
        end
    end

    -- print("updatedQuestPoint: ")
    for r, v in next, Z do
        updatedQuestPoint[r] = questPosesCopy[v]
    end

    return updatedQuestPoint
end

function GetQuest()
    local mainGui = Client.PlayerGui.Main
    local questVisible = mainGui:FindFirstChild("Quest") and mainGui.Quest.Visible

    if questVisible then
        return
    end

    local doubleQuestInfo = CheckDoubleQuest2()
    local questName = doubleQuestInfo.NameQuest
    local questID = doubleQuestInfo.ID
    
    local QuestPoint = {}

    for i, v in pairs(GetQuestPoint()) do
        QuestPoint[i] = v
    end

    if not QuestPoint[tostring(questName)] then
        print("Not found I'm sorry")
        return
    end
    
    local questPosition = QuestPoint[questName].Position
    local playerPosition = Client.Character.HumanoidRootPart.Position

    if GetDistance(questPosition, playerPosition) <= 8 then
        Comm:InvokeServer("StartQuest", tostring(questName), questID)
    else
        local QuestCFrame = QuestPoint[questName]
        --Client.Character.HumanoidRootPart.CFrame = QuestCFrame
        TweenService2(QuestCFrame)
    end
end

-- Killing Mob
local spawnPoints = {} -- Danh sách các điểm spawn
for _, v in pairs(workspace["_WorldOrigin"].EnemySpawns:GetChildren()) do
    if not spawnPoints[v.Name] or spawnPoints[v.Name] == nil then
        spawnPoints[v.Name] = {v.Position}
    elseif spawnPoints[v.Name] then
        table.insert(spawnPoints[v.Name], v.Position)
    end
end

function ReturnBosses(bg)
    local repStorageChild = ReplicatedStorage:FindFirstChild(bg)
    local workspaceChild = workspace.Enemies:FindFirstChild(bg)

    if repStorageChild or workspaceChild then
        local target = repStorageChild or workspaceChild
        for _, v in pairs(target:GetChildren()) do
            if v:IsA("Humanoid") and v.Health > 0 then
                return v.Parent
            end
        end
    end
    return false
end

function FightBoss(Boolean, bossName, teleportEnabled, tpbypassenabled)
    local boss = ReturnBosses(bossName)

    if boss then
        local isReplicated = ReplicatedStorage:FindFirstChild(bossName)
        
        if isReplicated and boss:FindFirstChild("HumanoidRootPart") or workspace.Enemies:FindFirstChild(bossName) then
            repeat
                if not Boolean then
                    return
                end
                EquipWeapon(Options.weapon and Options.weapon.Value)
                TweenService2(boss.HumanoidRootPart.CFrame * CFrame.new(0,30,0), 250, tpbypassenabled)
                BringMob = true
                PosMon = boss.HumanoidRootPart.CFrame
                
                boss.HumanoidRootPart.Size = Vector3.new(50,50,50)
                MobFarm = boss.Name
                UseFastAttack = true
                task.wait()
            until boss.Humanoid.Health == 0 or Boolean
            BringMob = false
            UseFastAttack = false
        end
    else
        if teleportEnabled then
            TeleportBetweenServers(placeID, 8)
        end
    end
end

function CheckMobInDistance(targetNames)
    local presence = {Workspace = false, ReplicatedStorage = false, NilInstance = false}

    local function checkNamespace(tableToCheck, namespace)
        for _, object in pairs(tableToCheck) do
            if type(targetNames) == "table" and table.find(targetNames, object.Name) then
                presence[namespace] = true
                break
            elseif type(targetNames) ~= "table" and targetNames == object.Name then
                presence[namespace] = true
                break
            end
        end
    end

    checkNamespace(workspace.Enemies:GetChildren(), "Workspace")
    checkNamespace(ReplicatedStorage:GetChildren(), "ReplicatedStorage")

    if type(targetNames) == "table" then
        local allNilInstances = getnilinstances()
        checkNamespace(allNilInstances, "NilInstance")
    end

    return presence
end

function MobHandler()
    if Client.PlayerGui.Main:FindFirstChild("Quest").Visible == false then
        GetQuest()
    else
        if workspace.Enemies:FindFirstChild(Mob1) then
            for _,v in pairs(workspace.Enemies:GetChildren()) do
                if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
                    if v.Name == Mob1 then
                        repeat
                            if not (Options.lvlfarm and Options.lvlfarm.Value) then
                                break
                            end
                            
                            if string.find(Client.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, Mob1) then
                                EquipWeapon(Options.weapon and Options.weapon.Value)
                                BringMob = true
                                TweenService2(v.HumanoidRootPart.CFrame * ChoosenCFrame)
                                PosMon = v.HumanoidRootPart.CFrame
                                MobFarm = v.Name
                                UseFastAttack = true
                            else
                                UseFastAttack = false
                                BringMob = false
                                Com("F_", "AbandonQuest")
                            end
                            task.wait()                            
                        until v.Humanoid.Health == 0 or not (Options.lvlfarm and Options.lvlfarm.Value) or not v.Parent or Client.PlayerGui.Main.Quest.Visible == false
                        BringMob = false
                        UseFastAttack = false
                    end
                end
            end
        else
            BringMob = false
            UseFastAttack = false
    
            for spawnName, positions in pairs(spawnPoints) do
                if spawnName == Mob1 then
                    for _, position in ipairs(positions) do
                        if not CheckMobInDistance(Mob1)["Workspace"] then
                            if TweenDone then
                                return
                            end

                            local pos = Vector3.new(position.x, position.y, position.z)
                            TweenService2(CFrame.new(pos) * SpawnCFrame, 10)
                            TweenDone = true
                            task.wait(1.5)
                            TweenDone = false
    
                        elseif CheckMobInDistance(Mob1)["Workspace"] then
                            if ReplicatedStorage:FindFirstChild(Mob1) then
                                TweenService2(ReplicatedStorage.Mob1.HumanoidRootPart.CFrame * ChoosenCFrame)
                            end
                        end
                    end
                else
                    lvl.CheckLevel()
                    if not CheckMobInDistance(Mob1)["Workspace"] then
                        if TweenDone then
                            return
                        end

                        TweenService2(CFrameMon, 10)
                        TweenDone = true
                        task.wait(1.5)
                        TweenDone = false

                    elseif CheckMobInDistance(Mob1)["Workspace"] then
                        if ReplicatedStorage:FindFirstChild(Mob1) then
                            TweenService2(ReplicatedStorage.Mob1.HumanoidRootPart.CFrame * ChoosenCFrame)
                        end
                    end
                end
            end
        end
    end
end

function KaitunMob()
    local mon = "Shanda"
    if workspace.Enemies:FindFirstChild(mon) then
        for _,v in pairs(workspace.Enemies:GetChildren()) do
            if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                if v.Name == mon then
                    repeat
                        if not (Options.oneclick and Options.oneclick.Value) then
                            return
                        end
                        InKaitunProgress = true
                        EquipWeapon(Options.weapon and Options.weapon.Value)
                        TweenService2(v.HumanoidRootPart.CFrame * ChoosenCFrame)
                        PosMon = v.HumanoidRootPart.CFrame
                        MobFarm = v.Name
                        UseFastAttack = true
                        BringMob = true

                        task.wait()
                    until v.Humanoid.Health == 0 or not v.Parent or not (Options.oneclick and Options.oneclick.Value)
                    BringMob = false
                    UseFastAttack = false
                end
            end
        end
    else
        BringMob = false
        UseFastAttack = false

        for spawnName, positions in pairs(spawnPoints) do
            if spawnName == "Shanda" then
                for _, position in ipairs(positions) do
                    if not CheckMobInDistance(mon)["Workspace"] then
                        if TweenDone then
                            return
                        end
                        
                        local pos = Vector3.new(position.x, position.y, position.z)
                        TweenService2(CFrame.new(pos) * SpawnCFrame, 10)
                        TweenDone = true
                        task.wait(1.5)
                        TweenDone = false

                    elseif CheckMobInDistance(mon)["Workspace"] then
                        if ReplicatedStorage:FindFirstChild(mon) then
                            TweenService2(ReplicatedStorage.mon.HumanoidRootPart.CFrame * ChoosenCFrame)
                        end
                    end
                end
            end
        end
    end
end

-- Saber

function GetSaber()
    if (Options.getsaber and Options.getsaber.Value) and LocalPlayerLevelValue >= 200 and not Comm:InvokeServer("ProQuestProgress").KilledShanks then
        local Jungle = workspace.Map.Jungle
        if Jungle.Final.Part.Transparency == 0 then
            if Jungle.QuestPlates.Door.Transparency == 0 then
                local targetColor = Color3.fromRGB(58, 125, 21) -- Replace with the color you want to check

                for index, plate in pairs(Jungle.QuestPlates:GetChildren()) do
                    if plate:IsA("Model") and plate.Name == ("Plate"..index) then
                        local Button = plate.Button
                
                        if Button and Button:IsA("BasePart") then
                            local currentColor = Button.Color
                
                            if currentColor ~= targetColor then
                                if TweenDone then
                                    break
                                end
                
                                TweenService2(Button.CFrame)
                
                                TweenDone = true
                                task.wait(2.5)
                                TweenDone = false
                            end
                        end
                    end
                end                    
            else
                local Desert = workspace.Map.Desert
                if Desert.Burn.Part.Transparency == 0 then
                    if not Comm:InvokeServer("ProQuestProgress").UsedTorch then
                        if FindTool("Torch") then
                            EquipWeapon(nil, "Torch")
                            
                            TweenService2(CFrame.new(1114.61475, 5.04679728, 4350.22803, -0.648466587, -1.28799094e-09, 0.761243105,
                         -5.70652914e-10, 1, 1.20584542e-09, -0.761243105, 3.47544882e-10, -0.648466587), 250, true)
                        else
                            TweenService2(Jungle.Torch.CFrame)
                        end
                    end
                else
                    if not Comm:InvokeServer("ProQuestProgress").UsedCup then
                        Com("F_", "ProQuestProgress", "GetCup")
                        task.wait(0.5)
                        EquipWeapon(nil, "Cup")
                        task.wait(0.5)
                        Com("F_", "ProQuestProgress",  "FillCup", Client.Character.Cup)
                        task.wait(1)
                        Com("F_", "ProQuestProgress", "SickMan")
                    else
                        if not Comm:InvokeServer("ProQuestProgress").TalkedSon then
                            Com("F_", "ProQuestProgress", "RichSon")
                        elseif Comm:InvokeServer("ProQuestProgress", "RichSon") == 0 then
                            FightBoss(Options.getsaber and Options.getsaber.Value, "Mob Leader [Boss]", false, true)
                        elseif Comm:InvokeServer("ProQuestProgress", "RichSon") == 1 then
                            Com("F_", "ProQuestProgress", "RichSon")
                            task.wait(0.5)
                            EquipWeapon(nil, "Relic")
                            task.wait(0.5)
                            TweenService2(CFrame.new(-1404.91504, 29.9773273, 3.80598116, 0.876514494, 5.66906877e-09, 0.481375456, 2.53851997e-08,
                     1, -5.79995607e-08, -0.481375456, 6.30572643e-08, 0.876514494), 150, true)

                        end
                    end
                end
            end
        else
            FightBoss(Options.getsaber and Options.getsaber.Value, "Saber Expert [Boss]", false, true)
        end  
    else
        Notify(10, "Your saber has been received. Please check your inventory!", nil, 5)
        if (Options.oneclick and Options.oneclick.Value) then
            Options.lvlfarm:SetValue(true)
        end
        Options.getsaber:SetValue(false)
    end
end

-- Unlock Second Sea
function AutoSecondSeaQuest()
    if LocalPlayerLevelValue >= 700 then
        local questProgress = Comm:InvokeServer("DressrosaQuestProgress")
        
        if not questProgress.UsedKey then
            if not (FindTool("Key") or Client.Character:FindFirstChild("Key")) then
                Comm:InvokeServer("DressrosaQuestProgress", "Detective")
            end
            
            if FindTool("Key") or Client.Character:FindFirstChild("Key") then
                EquipWeapon(nil,"Key")
                TweenService2(CFrame.new(1349.697265625, 37.34928512573242, -1328.8309326171875))
                workspace.Map.Ice.Door.Size = Vector3.new(30, 30, 30)
            end
        end
        
        if questProgress.UsedKey == true and questProgress.KilledIceBoss == false then
            local IceAdmiral = "Ice Admiral [Boss]"
            FightBoss(Options.secondsea and Options.secondsea.Value, IceAdmiral, false, true)
        end
        
        if questProgress.KilledIceBoss == true then
            Comm:InvokeServer("TravelDressrosa")
        end
    else
        Options.secondsea:SetValue(false)
        Notify(10, "Your level has not reached 700. Please do more farming without hands!", nil, 5)
    end
end

-- Player Handler

function SafeZone(target)
    for _, part in pairs(workspace["_WorldOrigin"].SafeZones:GetChildren()) do
        if GetDistance(target.HumanoidRootPart.Position, part.Position) > 300 then
            return false
        end
    end
    return true
end

function PlayerHandler()
    if Sea1 and not (Options.playerkill and Options.playerkill.Value) and LocalPlayerLevelValue >= 60 then
        Com("F_", "PlayerHunter")
        local cA = string.gsub(Client.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Defeat ", "")
        cA = string.gsub(cA, " %p(0/1)%p", "")
        if Client.PlayerGui.Main:FindFirstChild("Quest").Visible and cA and workspace.Characters:FindFirstChild(cA) then 
            Options.playerkill:SetValue(true)
        end
    elseif (Options.playerkill and Options.playerkill.Value) then
        if #blnamequest >= 6 and (Options.playerkill and Options.playerkill.Value) then
            local tidck = tick()
            repeat
                task.wait()
            until tick() - tidck >= 1
            TeleportBetweenServers(placeID, 10)
            return
        end     
        if Client.PlayerGui.Main:FindFirstChild("Quest").Visible then
            local cA = string.gsub(Client.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Defeat ", "")
            cA = string.gsub(cA, " %p(0/1)%p", "")
            
            if Client.PlayerGui.Main:FindFirstChild("Quest").Visible and
                not workspace.Characters:FindFirstChild(cA) then
                Com("F_", "AbandonQuest")
            end

            if Players:FindFirstChild(cA) then
                if Players[cA].Data.Level.Value < 60 or Players[cA].Data.Level.Value >= 150 or SafeZone(Players[cA].Character) then
                    table.insert(blnamequest, cA)
                    Com("F_", "AbandonQuest")
                end
            else
                Com("F_", "AbandonQuest")
            end

            if Client.PlayerGui.Main:FindFirstChild("Quest").Visible then
                for _, v in next, Players:GetPlayers() do
                    if v.Character and v.Character.Name == cA then
                        repeat
                            if not (Options.playerkill and Options.playerkill.Value) then
                                return
                            end

                            if Client.PlayerGui.Main.PvpDisabled.Visible then
                                Com("F_", "EnablePvp")
                            end

                            EquipWeapon(Options.weapon and Options.weapon.Value)
                            TweenService2(v.Character.HumanoidRootPart.CFrame * PlayerCFrame)
                            UseFastAttack = true
                            task.wait()
                        until not v.Character or not (Options.playerkill and Options.playerkill.Value) or not v.Character:FindFirstChild("HumanoidRootPart") or v.Character:FindFirstChild("Humanoid").Health <= 0 or not Client.PlayerGui.Main:FindFirstChild("Quest").Visible or SafeZone(v.Character)
                        UseFastAttack = false
                        table.insert(blnamequest, cA)
                    end
                end
            end
        else
            --print(Comm:InvokeServer("PlayerHunter"))
            if Comm:InvokeServer("PlayerHunter") == message[1] or Comm:InvokeServer("PlayerHunter") == message[2] then
                Options.playerkill:SetValue(false)
                if LocalPlayerLevelValue < 250 and LocalPlayerLevelValue >= 20 then
                    Options.lvlfarm:SetValue(false)
                else
                    Options.playerkill:SetValue(false)
                    Options.lvlfarm:SetValue(true)
                end
                wait(0.5)
                Notify(10, Comm:InvokeServer("PlayerHunter"), nil, 5)
                return
            end
        end
    end
end

if Sea1 then
    for _, v in pairs(workspace._WorldOrigin.PlayerSpawns:GetChildren()) do
        if v:FindFirstChild("Undertown") then
            continue
        end
        local Model = Instance.new("Model", v)
        Model.Name = "Undertown"
        local Spawn = Instance.new("Part", Model)
        Spawn.Anchored = true
        Spawn.CanCollide = false
        Spawn.Size = Vector3.new(10,10,10)
        Spawn.CFrame = CFrame.new(61163.8515625, 11.759522438049316, 1819.7841796875)
        Spawn.Transparency = 1
    end
end

-- AddPoint
function AddStat()

    local stat_labels = {
        ["Melee"] = {
            [1] = "AddPoint",
            [2] = "Melee",
            [3] = 1
        },
        ["Defense"] = {
            [1] = "AddPoint",
            [2] = "Defense",
            [3] = 1
        },
        ["Sword"] = {
            [1] = "AddPoint",
            [2] = "Sword",
            [3] = 1
        },
        ["Gun"] = {
            [1] = "AddPoint",
            [2] = "Gun",
            [3] = 1
        },
        ["Devil Fruit"] = {
            [1] = "AddPoint",
            [2] = "Demon Fruit",
            [3] = 1
        }
    }

    for label, args in pairs(stat_labels) do
        if Options[label] and Options[label].Value then
            local argsValue = tonumber(args[3])
            if argsValue then
                args[3] = 5
                Com("F_", unpack(args))
                wait(0.5)
            end
        end
    end
end

-- Auto CDK 
function enemyrip()
    TweenService2(CFrame.new(-5332.30371, 423.985413, -2673.48218))
    wait()
    if ReturnBosses("rip_indra True Form [Raid Boss]") then
        local mobs = workspace.Enemies:GetChildren()
        for i,v in pairs(mobs) do
            if v.Name == "rip_indra True Form [Raid Boss]" and v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
    return ReturnBosses("rip_indra True Form [Raid Boss]")
end

function Enemylongma()
    Tween(CFrame.new(-10171.7051, 406.981995, -9552.31738))
    if ReturnBosses("Longma [Boss]") then
        local mobs = workspace.Enemies:GetChildren()
        for i,v in pairs(mobs) do
            if v.Name == "Longma [Boss]" and v:IsA("Model") and v:FindFirstChild("Humanoid") and
                v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
    return ReturnBosses("Longma [Boss]")
end

function EnemyEliteBoss()
    if ReturnBosses("Deandre") or ReturnBosses("Urban") or ReturnBosses("Diablo") then
        local mobs = workspace.Enemies:GetChildren()
        for i,v in pairs(mobs) do
            if v.Name == "Deandre" or v.Name == "Diablo" or v.Name == "Urban"  and v:IsA("Model") and v:FindFirstChild("Humanoid") and
                v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                return v
            end
        end
    end
    return ReturnBosses("Deandre") or ReturnBosses("Urban") or ReturnBosses("Diablo")
end

function AutoTushita()
    if not FindTool("God's Chalice") then
        if ReturnBosses("Deandre") or ReturnBosses("Urban") or ReturnBosses("Diablo") then
            if Client.PlayerGui.Main.Quest.Visible == false then
                local Distance = GetDistance(Client.Character.HumanoidRootPart.Position, Vector3.new(5420.49219, 314.446045, -2823.07373))
                repeat
                    TweenService2(CFrame.new(5420.49219, 314.446045, -2823.07373))
                    task.wait()
                until not AutoTushita or Distance <= 10
                task.wait(1.1)
                Comm:InvokeServer("EliteHunter")
                task.wait(1)
            elseif Client.PlayerGui.Main.Quest.Visible == true then
                lvl.CheckLevel()
                pcall(function()
                    EquipWeapon(Options.weapon and Options.weapon.Value)
                    pcall(function()
                        local v = EnemyEliteBoss()
                        v.HumanoidRootPart.CanCollide = false
                        v.HumanoidRootPart.Size = Vector3.new(50, 50, 50)
                        TweenService2(v.HumanoidRootPart.CFrame * ChoosenCFrame)
                        Click()
                    end)
                end)
            end
        else
            Notify(30, "Finding List mobs: Deandre")
            TweenService2(CFrame.new(-12554.9443, 337.194092, -7501.44727)) -- Mansion
        end
    elseif FindTool("Holy Torch") then
        EquipWeapon(nil, "Holy Torch")
        local torches = workspace.Map.Turtle.QuestTorches:GetChildren()

        table.sort(torches, sortTorchesByName)
        
        for index, torch in pairs(torches) do
            if torch.Name then
                if not (torch.Particles.Main.Enabled and torch.Particles.PointLight.Enabled) then
                    TweenService1(torch.CFrame)
                    
                    -- Chờ cho đến khi cả hai điều kiện đều được đáp ứng
                    while not (torch.Particles.Main.Enabled and torch.Particles.PointLight.Enabled) do
                        task.wait(1)
                    end
                end
            end
        end
    elseif ReplicatedStorage:FindFirstChild("Longma") then
        FightBoss(Options.tu and Options.tu.Value, "Longma", false, true)
    elseif ReplicatedStorage:FindFirstChild("rip_indra True Form [Raid Boss]") then
        FightBoss(Options.tu and Options.tu.Value, "rip_indra True Form [Raid Boss]", false, true)
    else
        TweenService2(CFrame.new(-12554.9443, 337.194092, -7501.44727))
    end
end

local CameraShakerR = require(ReplicatedStorage.Util.CameraShaker)
CameraShakerR:Stop()
spawn(function()
    local thread = task.spawn(function()
        RunService.Stepped:Connect(function()
            LocalPlayerLevelValue = Client.Data.Level.Value
            LocalPlayerBeliValue = Client.Data.Beli.Value
            LocalPlayerFragmentValue = Client.Data.Fragments.Value
            getgenv().rejoin = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(
                child)
                if child.Name == 'ErrorPrompt' and child:FindFirstChild('MessageArea') and child.MessageArea:FindFirstChild("ErrorFrame") then
                    game:GetService("TeleportService"):Teleport(game.PlaceId)
                end
            end)
            AddStat()
            task.wait(0.2)
        end)
        spawn(function()
            while task.wait() do
                if (Options.spm and Options.spm.Value) then
                    pcall(function()
                        AutoSuperhuman(spmRequirement)
                    end)
                end
            end
        end)
        spawn(function()
            while true do
                if (Options.oneclick and Options.oneclick.Value) then
            
                    if Sea1 then
                        if LocalPlayerLevelValue < 250 and LocalPlayerLevelValue >= 20 then
                            Options.lvlfarm:SetValue(false)
                            if LocalPlayerLevelValue >= 60 then
                                InKaitunProgress = false
                    
                                Options.playerkill:SetValue(true)
                                print("GGGGGGGGGGGGG", Options.oneclick.Value)
                                task.wait(20)
                            end
                            if not (Options.playerkill and Options.playerkill.Value) then
                                KaitunMob()
                            end
                        elseif LocalPlayerLevelValue >= 200 and not FindItemInInventory("Saber") then
                            Options.getsaber:SetValue(true)
                            task.wait(10)
                        elseif LocalPlayerLevelValue >= 700 then
                            Options.lvlfarm:SetValue(false)
                            Options.secondsea:SetValue(true)
                        else
                            if LocalPlayerLevelValue >= 60 then
                                InKaitunProgress = false
                    
                                Options.playerkill:SetValue(true)
                                print("GGGGGGGGGGGGG", Options.oneclick.Value)
                                task.wait(20)
                            end
                            if not (Options.playerkill and Options.playerkill.Value) and (Options.oneclick and Options.oneclick.Value) then
                                Options.lvlfarm:SetValue(true)
                            end
                        end
                    elseif Sea2 then
                    elseif Sea3 then
                        if LocalPlayerLevelValue >= 1500 and LocalPlayerLevelValue <= 2550 then
                            Options.lvlfarm:SetValue(true)
                        end
                    end
                else
                    
                end
                task.wait()
            end
        end)

        -- Sea1 
        if Sea1 then
            spawn(function()
                while true do
                    if (Options.playerkill and Options.playerkill.Value) then
                        if not (Options.lvlfarm and Options.lvlfarm.Value) then
                            pcall(function()
                                PlayerHandler()
                            end)
                        else
                            Options.playerkill:SetValue(false)
                        end
                    end
                    task.wait()
                end
            end)
            spawn(function()
                while true do
                    if (Options.getsaber and Options.getsaber.Value) then
                        if not (Options.lvlfarm and Options.lvlfarm.Value) and not (Options.playerkill and Options.playerkill.Value) then
                            GetSaber()
                        else
                            Options.getsaber:SetValue(false)
                        end
                    end
                    task.wait()
                end
            end)
            spawn(function()
                while true do
                    if (Options.secondsea and Options.secondsea.Value) then
                        if not (Options.playerkill and Options.playerkill.Value) then
                            AutoSecondSeaQuest()
                        else
                            Options.secondsea:SetValue(false)
                        end
                    end
                    task.wait()
                end
            end)
        end
        -- Sea2
        if Sea2 then
            
        end
        -- Sea3
        if Sea3 then
            spawn(function()
                while true do
                    if (Options.tu and Options.tu.Value) then
                        
                    end
                    if (Options.cdk and Options.cdk.Value) then
                        
                    end
                    task.wait()
                end
            end)
        end
        -- All Seas
        spawn(function()
            while true do
                pcall(function()
                    if (Options.lvlfarm and Options.lvlfarm.Value) then
                        if not (Options.playerkill and Options.playerkill.Value) then
                            MobHandler()
                        end
                    end
                end)
                task.wait()
            end
        end)
        spawn(function()
            while true do
                pcall(function()
                    if (Options.bk and Options.bk.Value) then
                        if not (Options.lvlfarm and Options.lvlfarm.Value) then
                            FightBoss(Options.bk and Options.bk.Value, Options.bchoose and Options.bchoose.Value, false, true)
                        else
                            Options.bk:SetValue(false)
                        end
                    end
                end)
                task.wait()
            end
        end)
        spawn(function()
            while true do
                if UseFastAttack then
                    if (Options.fastattack and Options.fastattack.Value) then
                        if InKaitunProgress then
                            AttackFunction("NPC", 60)
                            pcall(function()
                                ResetCharacter()
                                ResetCombatFramework()
                            end)
                        else
                            repeat
                                if (Options.playerkill and Options.playerkill.Value) then
                                    AttackFunction("Player", 60)
                                else
                                    AttackFunction("NIL", 60)
                                end
                        
                                pcall(function()
                                    ResetCharacter()
                                    ResetCombatFramework()
                                end)
                                wait()
                            until not UseFastAttack or not (Options.fastattack and Options.fastattack.Value)
                        end
                    else
                        pcall(function()
                            VirtualUser:CaptureController()
                            task.wait(0.5)
                            VirtualUser:Button1Down(Vector2.new(851, 158))
                            ResetCombatFramework()
                        end)
                    end
                end
                task.wait(0.05)
            end
        end)
        spawn(function()
            while true do
                if Options.oneclick and Options.oneclick.Value then
                    
                end
                if Options.HS and Options.HS.Value then
                    local tickBefore = tick()
                    local notificationTriggered = false
                    
                    repeat
                        if (Options.HS and Options.HS.Value) then
                            local timeRemaining = (Options.Delay_HS.Value * 60) - (tick() - tickBefore)
                        
                            if timeRemaining <= 5 * 60 and not notificationTriggered then
                                Notify(3, "Your server will be changed for 5 minutes...", nil, 5)
                                notificationTriggered = true
                            end
                        
                            print(timeRemaining)
                        end
                        task.wait(1)
                    until (tick() - tickBefore) >= (Options.Delay_HS.Value * 60) or not ((Options.HS and Options.HS.Value))
                    while (Options.HS and Options.HS.Value) do
                        Notify(2, "Teleporting to a new server, please wait...", nil, 5)
                        wait(0.5)
                        TeleportBetweenServers(placeID, 5)
                    end
                end
                wait()
            end
        end)
        spawn(function()
            while task.wait(.01) do
                if BringMob and ((Options.lvlfarm and Options.lvlfarm.Value) or (Options.oneclick and Options.oneclick.Value)) then
                    if (Options.bringmob and Options.bringmob.Value) then
                        if setscriptable then
                            setscriptable(Client, "SimulationRadius", true)
                        end
                        if sethiddenproperty then
                            sethiddenproperty(Client, "SimulationRadius", math.huge)
                        end
                        pcall(function()
                            BringMobsToPosition(PosMon, MobFarm)
                        end)
                    end
                end  
            end          
        end)
        spawn(function()
            local ParticleModul1e = require(Client.PlayerScripts.CombatFramework.Particle)
            while true do
                pcall(function()
                    if Options.revanim and Options.revanim.Value then
                        setupAttackAnimationOverride(ParticleModul1e)
                    end
                    if Options.revdeath and Options.revdeath.Value then
                        for _, death in pairs(ReplicatedStorage.Effect.Container:GetChildren()) do
                            if death.Name == "Death" then
                                death:Destroy()
                            end
                        end
                    end
                    if Options.revattack and Options.revattack.Value then
                        pcall(function()
                            for _, effect in pairs(workspace["_WorldOrigin"]:GetChildren()) do
                                if effect.Name == "CurvedRing" or effect.Name == "SwordSlash" or effect.Name == "Sounds" or effect.Name == "SlashHit" or effect.Name == "DamageCounter" then
                                    effect:Destroy()
                                end
                            end
                        end)
                    end
                end)
                task.wait()
            end
        end)
        spawn(function()
            RunService.RenderStepped:Connect(function()
                pcall(function()
                    if (Options.lvlfarm and Options.lvlfarm.Value) then
                        if workspace.Enemies[Mob1].Humanoid.Health == 0 then
                            workspace.Enemies[Mob1]:Destroy()
                        end
                    end
                end)
            end)
        end)
        spawn(function()
            while task.wait() do
                if (Options.lvlfarm and Options.lvlfarm.Value) or (Options.playerkill and Options.playerkill.Value) or (Options.oneclick and Options.oneclick.Value) or (Options.getsaber and Options.getsaber.Value) or (Options.secondsea and Options.secondsea.Value) or (Options.cdk and Options.cdk.Value) or (Options.at and Options.at.Value) or (Options.tu and Options.tu.Value) or (Options.bk and Options.bk.Value) then
                    DisableCollisions(Client, false)
                    if not Client.Character:FindFirstChild("HasBuso") then
                        Com("F_", "Buso")
                    end
                    Client.Character.Humanoid.Sit = false
                    if not Client.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                        local Noclip = Instance.new("BodyVelocity")
                        Noclip.Name = "BodyClip"
                        Noclip.Parent = Client.Character.HumanoidRootPart
                        Noclip.MaxForce = Vector3.new(1, 1, 1) * math.huge
                        Noclip.Velocity = Vector3.new(0, 0, 0)
                    end
                else
                    DisableCollisions(Client, true)
                    if Client.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                        Client.Character.HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
                    end
                end
            end
        end)
    end)
    table.insert(shared.callbacks, function()
        pcall(task.cancel, thread)
    end)
end)

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("Crazzy Hub")
SaveManager:SetFolder("Crazzy Hub/bf-"..placeID)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Crazzy Hub",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
