--a
local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/RedzLibV5/main/Source.Lua"))()

local Window = redzlib:MakeWindow({
	Title = "Crazzy Hub V3",
	SubTitle = "by ! xSync",
	SaveFolder = "Crazzy_Hub"
})

local Main = Window:MakeTab({"Main", "home"})
local Stars = Window:MakeTab({"Stars", "users"})
local Misc = Window:MakeTab({"Stars", "menu"})

local p = Instance.new("ScreenGui")
local q = Instance.new("TextButton")
local r = Instance.new("UICorner")
local s = Instance.new("ImageLabel")
r.Name = "sex"
r.Parent = q;
s.Name = "sexgay"
s.Parent = q;
s.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
s.BackgroundTransparency = 1.000;
s.BorderSizePixel = 0;
s.Position = UDim2.new(0.234619886, 0, 0.239034846, 0)
s.Size = UDim2.new(0, 30, 0, 30)
s.Image = "rbxassetid://15689000757"
p.Name = "nung"
p.Parent = game.CoreGui;
p.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
q.Name = "gay"
q.Parent = p;
q.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
q.BackgroundTransparency = 0.1;
q.BorderSizePixel = 0;
q.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
q.Size = UDim2.new(0, 55, 0, 55)
q.Font = Enum.Font.SourceSans;
q.Text = ""
q.TextColor3 = Color3.fromRGB(153, 51, 255)
q.TextSize = 20.000;
q.Draggable = true;
q.MouseButton1Click:Connect(function()
	Window:Minimize()
end)
------------------------------------------------------------------------------------------------------------------------Function
while true do 
    if game:IsLoaded() and game.PlaceId == 6299805723 then 
        break; 
    end 
    task.wait(.05) 
end

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character

local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")

getgenv().Setting = {
    CollectDrop = false,
    Stars = {AutoPurchase = false, StarsList = {}, SelectedStars = nil, TargetStars = nil, TargetWorld = nil,},
    Claim = {Ticket = false, Spin = false, Gift = false,Merchant = false,},
    AutoFarm = {Enabled = false, MobSelected = nil, TargetSelected = nil, EnemiesList = {"Click to Refresh List"}, Height = false,},
    Client = {WalkSpeed = 16, JumpPower = 50},
}

function RefreshEnemies(NewValue)
    table.clear(Setting.AutoFarm.EnemiesList)
    if workspace.Worlds:FindFirstChild(NewValue) ~= nil and workspace.Worlds[NewValue]:FindFirstChild("Enemies") then
        for _,v in ipairs(workspace.Worlds[NewValue].Enemies:GetChildren()) do
            if v:FindFirstChild("DisplayName") then
                if not table.find(Setting.AutoFarm.EnemiesList, v.DisplayName.Value) then table.insert(Setting.AutoFarm.EnemiesList, v.DisplayName.Value) end
            end
        end
    end
end

function AutoFarm()
    local function GetEnemies()
        if workspace.Worlds:FindFirstChild(LocalPlayer.World.Value) ~= nil and workspace.Worlds[LocalPlayer.World.Value]:FindFirstChild("Enemies") then
            for i,v in ipairs(workspace.Worlds[LocalPlayer.World.Value].Enemies:GetChildren()) do
                if v:FindFirstChild("DisplayName") and v:FindFirstChild("Health") then
                    if v.DisplayName.Value == Setting.AutoFarm.MobSelected and v.Health.Value > 0 then
                        return v
                    end
                end
            end
        end
        return nil
    end
    local function MoveTo(bool)
        local Teleported = game:GetService("ReplicatedStorage").Bindable.Teleported
        if bool and Character and Setting.AutoFarm.TargetSelected ~= nil and Setting.AutoFarm.TargetSelected:FindFirstChild("HumanoidRootPart") then
            local HumanoidRootPart = Character.HumanoidRootPart
            local EnemiesHRP = Setting.AutoFarm.TargetSelected.HumanoidRootPart
            local Water = workspace.Worlds[LocalPlayer.World.Value]:FindFirstChild("Water")
            HumanoidRootPart.Anchored = false
            if Setting.AutoFarm.Height then HumanoidRootPart.CFrame = EnemiesHRP.CFrame else HumanoidRootPart.CFrame = EnemiesHRP.CFrame * CFrame.new(0, -5, 0) end
            Teleported:Fire()
            task.wait(.1)
            if Setting.AutoFarm.Height then HumanoidRootPart.CFrame = EnemiesHRP.CFrame * CFrame.new(0, 20, 0) else HumanoidRootPart.CFrame = CFrame.new(EnemiesHRP.CFrame.X, Water.CFrame.Y + 8, EnemiesHRP.CFrame.Z) end
            HumanoidRootPart.Anchored = true
        elseif bool and Setting.AutoFarm.TargetSelected == nil and Character then
            local HumanoidRootPart = Character.HumanoidRootPart
            if HumanoidRootPart.Anchored == true then HumanoidRootPart.Anchored = false end
            local Water = workspace.Worlds[LocalPlayer.World.Value]:FindFirstChild("Water")
            if Water ~= nil then
                HumanoidRootPart.CFrame = CFrame.new(Water.CFrame.X + math.random(30, 120), Water.CFrame.Y + 5, Water.CFrame.Z + math.random(30, 120))
                Teleported:Fire()
                HumanoidRootPart.Anchored = true
            end
        elseif not bool and Character then
            if Character then
                task.wait(.5)
                local HumanoidRootPart = Character.HumanoidRootPart
                HumanoidRootPart.Anchored = false

                if not Setting.AutoFarm.Height then
                    HumanoidRootPart.CFrame = HumanoidRootPart.CFrame * CFrame.new(0, 20, 0)
                end
                Teleported:Fire()
            end
        end
    end
    if Setting.AutoFarm.Enabled then
        task.spawn(function()
            local SendPet = game:GetService("ReplicatedStorage").Bindable.SendPet
            local ClickerDamage = game:GetService("ReplicatedStorage").Remote.ClickerDamage
            local Old_Height = Setting.AutoFarm.Height
            MaxHealth = 100
            IsTeleported = false
            Setting.AutoFarm.TargetSelected = nil
            while Setting.AutoFarm.Enabled do
                if Setting.AutoFarm.MobSelected ~= nil then
                    if Setting.AutoFarm.TargetSelected == nil then IsTeleported = false; Setting.AutoFarm.TargetSelected = GetEnemies(); getgenv().Status:UpdateLabel("Status: Finding mob") end
                    if Setting.AutoFarm.TargetSelected ~= nil then
                        if Setting.AutoFarm.TargetSelected.Parent.Name == "Effects" then
                            Setting.AutoFarm.TargetSelected = nil
                            getgenv().Status:UpdateLabel("Status: "..Setting.AutoFarm.MobSelected.." | Health: 0%")
                        else
                            if not IsTeleported then MoveTo(true); IsTeleported = true end
                            if Setting.AutoFarm.TargetSelected:FindFirstChild("MaxHealth") ~= nil and Setting.AutoFarm.TargetSelected.MaxHealth.Value ~= MaxHealth then MaxHealth = Setting.AutoFarm.TargetSelected.MaxHealth.Value end
                            if Setting.AutoFarm.Height ~= Old_Height then MoveTo(true) end
                            SendPet:Fire(Setting.AutoFarm.TargetSelected, true)
                            ClickerDamage:FireServer()
                            local Health = Setting.AutoFarm.TargetSelected:FindFirstChild("Health")
                            if Health ~= nil then
                                Health = Health.Value
                                local Calculate = tostring(math.ceil(Health / MaxHealth * 100))
                                getgenv().Status:UpdateLabel("Status: "..Setting.AutoFarm.MobSelected.." | Health: "..Calculate.."%")
                            end
                            if Setting.AutoFarm.TargetSelected:FindFirstChild("DisplayName") ~= nil and Setting.AutoFarm.TargetSelected.DisplayName.Value ~= Setting.AutoFarm.MobSelected then Setting.AutoFarm.TargetSelected = nil end
                        end
                    end
                else
                    getgenv().Status:UpdateLabel("Status: Select a mob")
                end
                task.wait(.05)
            end
        end)
    else
        MoveTo(false)
    end
end

function CollectDrop()
    task.spawn(function()
        for _,v in ipairs(workspace.Effects:GetDescendants()) do
            if v.Name == "Base" then
                task.spawn(function()
                    while Setting.CollectDrop do
                        if v == nil then break end
                        if Character then
                            if v ~= nil then v.CFrame = Character.HumanoidRootPart.CFrame end
                        end
                        task.wait(.1)
                    end
                end)
            end
        end
    end)
end

function ClaimStuff(mode)
    if mode == "Ticket" then
        task.spawn(function()
            while Setting.Claim.Ticket do
                game:GetService("ReplicatedStorage").Remote.ClaimTicket:FireServer()
                task.wait(1)
            end
        end)
    elseif mode == "Spin" then
        task.spawn(function()
            while Setting.Claim.Spin do
                game:GetService("ReplicatedStorage").Remote.DailySpin:FireServer()
                task.wait(1)
            end
        end)
    elseif mode == "Merchant" then
        task.spawn(function()
            while Setting.Claim.Merchant do
                game:GetService("ReplicatedStorage").Remote.ClaimBoost:FireServer()
                task.wait(1)
            end
        end)
    elseif mode == "Gift" then
        task.spawn(function()
            local Number = 1
            while Setting.Claim.Gift do
                if Number > 16 then Number = 1 end
                game:GetService("ReplicatedStorage").Remote.ClaimGift:FireServer(Number)
                Number = Number + 1
                task.wait(1)
            end
        end)
    end
end

function AutoPurchase()
    local function getWorld()
        if Setting.Stars.SelectedStars ~= nil then
            for _,v in ipairs(workspace.Worlds:GetChildren()) do
                if v:FindFirstChild(Setting.Stars.SelectedStars) ~= nil then
                    return v
                end
            end
        end
        return nil
    end
    task.spawn(function()
        local AttemptTravel = game:GetService("ReplicatedStorage").Remote.AttemptTravel
        local Teleported = game:GetService("ReplicatedStorage").Bindable.Teleported
        local OpenEgg = game:GetService("ReplicatedStorage").Remote.OpenEgg
        Old_Target = Setting.Stars.SelectedStars
        Setting.Stars.TargetWorld = nil
        Setting.Stars.TargetStars = nil
        while Setting.Stars.AutoPurchase do
            if Setting.Stars.SelectedStars ~= nil then
                if Setting.Stars.TargetWorld == nil then Setting.Stars.TargetWorld = getWorld() end
                if Setting.Stars.TargetWorld ~= nil and Setting.Stars.TargetStars == nil then Setting.Stars.TargetStars = Setting.Stars.TargetWorld:FindFirstChild(Setting.Stars.SelectedStars) end
                if Character then
                    local HumanoidRootPart = Character.HumanoidRootPart
                    if Setting.Stars.TargetWorld ~= nil and Setting.Stars.TargetStars ~= nil then
                        if Setting.Stars.SelectedStars ~= Old_Target then
                            HumanoidRootPart.Anchored = false
                            Old_Target = Setting.Stars.SelectedStars
                            Setting.Stars.TargetWorld = nil
                            Setting.Stars.TargetStars = nil
                        else
                            if Setting.Stars.TargetWorld ~= nil and Setting.Stars.TargetStars ~= nil then
                                AttemptTravel:InvokeServer(tostring(Setting.Stars.TargetWorld.Name))
                                if Setting.Stars.TargetStars:FindFirstChild("Stand") ~= nil then
                                    if not HumanoidRootPart.Anchored then
                                        HumanoidRootPart.CFrame = Setting.Stars.TargetStars.Stand.CFrame * CFrame.new(0, 1, 6.5)
                                        task.wait(1)
                                        HumanoidRootPart.CFrame = Setting.Stars.TargetStars.Stand.CFrame * CFrame.new(0, 1, 6.5)
                                        HumanoidRootPart.Anchored = true
                                        Teleported:Fire()
                                    end
                                    AttemptTravel:InvokeServer(tostring(Setting.Stars.TargetWorld.Name))
                                    OpenEgg:InvokeServer(Setting.Stars.TargetStars, 5)
                                end
                            end
                        end
                    end
                end
            end
            task.wait(.1)
        end
    end)
end

spawn(function()
    while game:GetService('RunService').Heartbeat:wait(2) do
        if Yen then
            pcall(function()
                game:GetService("Workspace").Effects.Yen.Base.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            end)
        end
    end
end)

local EggModule = require(game:GetService("ReplicatedStorage").ModuleScripts.EggStats) do
    for i,v in next, (EggModule) do
        if i ~= "MultiOpen" and i ~= "Unknown" then
            if rawget(v, "DisplayName") and not rawget(v, "Currency") then
                if not table.find(Setting.Stars.StarsList, tostring(v.DisplayName)) then table.insert(Setting.Stars.StarsList, tostring(v.DisplayName)) end
            end
        end
    end
end
------------------------------------------------------------------------------------------------------------------------Main Tab
getgenv().Status = Main:AddParagraph({"Status"})

local FarmMethod = Main:AddDropdown({
    Name = "Farm Method",
    Description = "Cách cày",
    Options = {"Top", "Bottom"},
    Default = "Top",
    Flag = "Top",
    Callback = function(value)
        if value == "Top" then
            Setting.AutoFarm.Height = true
        elseif value == "Bottom" then
            Setting.AutoFarm.Height = false
        end
    end
})

local Farm = Main:AddSection({"Farm"})

local EnemiesDropdown = Main:AddDropdown({
    Name = "Select Monster",
    Description = "Chọn quái",
    Options = Setting.AutoFarm.EnemiesList,
    Default = "Select mob to farm",
    Flag = "Select mob to farm",
    Callback = function(value)
        if value == "Click to Refresh List" then 
            RefreshEnemies(LocalPlayer.World.Value) EnemiesDropdown:Refresh(Setting.AutoFarm.EnemiesList) 
            return 
        end
        Setting.AutoFarm.MobSelected = value
    end
})

Main:AddButton({"Refresh Monster List", function()
    RefreshEnemies(LocalPlayer.World.Value)
    EnemiesDropdown:Refresh(Setting.AutoFarm.EnemiesList)
end})

local AutoFarmSelectedMonster = Main:AddToggle({
    Name = "Auto Farm Selected Monster",
    Description = "Tự động cày quái đã chọn",
    Default = false
})
AutoFarmSelectedMonster:Callback(function(value)
    Setting.AutoFarm.Enabled = value
    if not value then 
        getgenv().Status:UpdateLabel("Status") 
    end
    AutoFarm()
end)

local AutoCollectYen = Main:AddToggle({
    Name = "Auto Collect Yen",
    Description = "Tự động nhặt Yen",
    Default = true
})
AutoCollectYen:Callback(function(value)
    Yen = value
end)
------------------------------------------------------------------------------------------------------------------------Stars Tab
local Automatic = Stars:AddSection({"Automatic"})

local SelectStarsToOpen = Stars:AddDropdown({
    Name = "Select Stars To Open",
    Description = "Chọn nhân vật để mở",
    Options = Setting.Stars.StarsList,
    Default = "Select a stars to open",
    Flag = "Select a stars to open",
    Callback = function(DisplayName)
        for StarsName, Table in next, (EggModule) do
            if tostring(StarsName) ~= "MultiOpen" and tostring(StarsName) ~= "Unknown" then
                if rawget(Table, "DisplayName") and not rawget(Table, "Currency") then
                    if Table.DisplayName == DisplayName then
                        Setting.Stars.SelectedStars = tostring(StarsName)
                    end
                end
            end
        end
    end
})

local AutoOpenSelectedStars = Stars:AddToggle({
    Name = "Auto Open Selected Stars",
    Description = "Tự động mở nhân vật đã chọn",
    Default = false
})
AutoOpenSelectedStars:Callback(function(value)
    Setting.Stars.AutoPurchase = value
    if value then
        AutoPurchase()
    else
        if Character then
            local HumanoidRootPart = Character.HumanoidRootPart
            HumanoidRootPart.Anchored = false
        end
    end
end)
------------------------------------------------------------------------------------------------------------------------Misc Tab
